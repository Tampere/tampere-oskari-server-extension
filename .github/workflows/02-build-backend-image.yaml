name: "02 - Build backend image"
on:
  push:
    tags:
      - 'backend-*'
  workflow_dispatch:
    inputs:
      tag:
        required: true
        description: 'Tag to release'
        type: string

jobs:
  create-backend-prod-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      attestations: write
      id-token: write

    steps:
      - name: "extract tag name"
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "TAG_NAME=${{github.action_ref}}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          fi
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main
        with:
          ref: ${{ env.TAG_NAME }}

      - name: 'Extract semantic version'
        run: | 
          export BACKEND_VERSION="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
          echo "BACKEND_VERSION=${BACKEND_VERSION}" >> $GITHUB_ENV
          echo "Releasing version: ${BACKEND_VERSION}"

### Download frontend packages
      - uses: robinraju/release-downloader@v1
        with:
          latest: true
          fileName: 'oskari-frontend-*.tar.gz'
          out-file-path: './backend/'

      # Start the build of dockerfile
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: 'override dockerignore'
        working-directory: backend
        run: echo -e '*\n!docker/**\n!webapp-map/target/*' > .dockerignore

      - name: "Extract frontend version"
        working-directory: backend
        run: echo "FRONTEND_VERSION=$(ls ./webapp-map/src/main/webapp/Oskari/dist)" >> $GITHUB_ENV

#######################
### Build backend image
#######################

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # Github packages requires a mandatory login, but becouse the dependency
      # packages are public, we can use GITHUB_TOKEN from this action
      - uses: s4u/maven-settings-action@v3.1.0
        with:
          servers: |
            [{
                "id": "ubigu-github-oskari-server",
                "username": "ignored",
                "password": "${{ secrets.GITHUB_TOKEN }}"
            }]



###################################
# Build and deploy production image
###################################
      - name: "Unzip the frontend to correct location"
        working-directory: backend
        run: mkdir -p ./webapp-map/src/main/webapp/Oskari/ && tar -xz -C ./webapp-map/src/main/webapp/Oskari/ -f ./oskari-frontend*-prod.tar.gz

      - name: build package
        working-directory: backend
        run: mvn --batch-mode package

      - name: 'Extract metadata (tags, labels) for production'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            latest
            ${{env.BACKEND_VERSION }}

      - name: 'Build and push production Docker image'
        id: push
        uses: docker/build-push-action@v6
        with:
          context: backend
          build-args:
            FRONTEND_VERSION=${{env.FRONTEND_VERSION}}
            OSKARI_CONTEXT=oskari
          file: ./backend/docker/github.Containerfile
          push: true
          tags: |
            latest
            ${{env.BACKEND_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}

      ###################################
      # Build and deploy oskaritest image
      ###################################
      - name: "Unzip the frontend to correct location"
        working-directory: backend
        run: mkdir -p ./webapp-map/src/main/webapp/Oskari/ && tar -xz -C ./webapp-map/src/main/webapp/Oskari/ -f ./oskari-frontend*-test.tar.gz

      - name: build package
        working-directory: backend
        run: mvn --batch-mode package

      - name: 'Build and push oskaritest Docker image'
        id: push
        uses: docker/build-push-action@v6
        with:
          context: backend
          build-args:
            FRONTEND_VERSION=${{env.FRONTEND_VERSION}}
            OSKARI_CONTEXT=oskaritest
          file: ./backend/docker/github.Containerfile
          push: true
          tags: |
            latest-oskaritest
            ${{env.BACKEND_VERSION }}-oskaritest
          labels: ${{ steps.meta.outputs.labels }}